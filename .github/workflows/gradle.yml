name: Java CICD

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  push_to_registry:
    name: Push to aws container registry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      #gradlew 권한 추가
      - name: Add permission
        run: chmod +x gradlew

      - name: make application-prod.properties
        if: contains(github.ref, 'develop') || contains(github.ref, 'main')
        run: |
          cd ./src/main/resources
          touch ./application-prod.properties
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
        shell: bash

      # gradle build
      - name: Build with Gradle
        env:
          SPRING_PROFILES_ACTIVE: prod
        run: ./gradlew clean build --stacktrace
        shell: bash

      #도커 빌드 & 이미지 push
      - name: Docker build & push to prod
        if: contains(github.ref, 'develop') || contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t testy-pie -f ./Dockerfile .
          docker tag testy-pie:latest ${{ secrets.DOCKER_ID }}/testy-pie:latest
          docker push ${{ secrets.DOCKER_ID }}/testy-pie:latest

  pull_from_registry:
    name: Connect server ssh and pull from container registry
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      #docker 이미지를 ec2 서버에 다운 실행
      - name: Deploy to prod
        if: contains(github.ref, 'develop') || contains(github.ref, 'main')
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_NAME }}
          username: ${{ secrets.EC2_USER_NAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            docker pull ${{ secrets.DOCKER_ID }}/testy-pie:latest
            docker stop testy-pie
            docker rm testy-pie
            docker run -d --name testy-pie -p 8080:8080 ${{ secrets.DOCKER_ID }}/testy-pie
            if docker images -f "dangling=true" -q | grep . > /dev/null; then
              docker rmi $(docker images -f "dangling=true" -q)
            fi